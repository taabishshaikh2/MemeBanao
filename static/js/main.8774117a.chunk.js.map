{"version":3,"sources":["Meme.js","Navbar.js","MemeGenerated.js","App.js","reportWebVitals.js","index.js"],"names":["Meme","useState","memes","setMemes","current","setCurrent","captions","setCaptions","length","history","useHistory","useEffect","fetch","then","data","json","response","_memes","Array","box_count","fill","isArray","className","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","res","push","url","console","log","map","onChange","e","text","target","value","i","updateCaption","meme","src","alt","Navbar","to","MemeGenerated","copied","setCopied","location","useLocation","URLSearchParams","search","get","clipboard","useClipboard","copy","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8774117a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'; \r\nimport { useHistory } from 'react-router-dom';\r\nimport {FaArrowAltCircleRight, FaArrowAltCircleLeft} from 'react-icons/fa';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Meme = () => {\r\n    \r\n    const [memes, setMemes] = useState([]);\r\n    const [current, setCurrent] = useState(0);\r\n\r\n    const [captions, setCaptions] = useState([])\r\n    const length = memes.length;\r\n\r\n    const history = useHistory();\r\n\r\n    const updateCaption = (e, index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n          captions.map((c, i) => {\r\n            if(index === i) {\r\n              return text;\r\n            } else {\r\n              return c;\r\n            }\r\n          })\r\n        );\r\n      };\r\n\r\n      const generateMeme = () => {\r\n        const currentMeme = memes[current];\r\n        const formData = new FormData();\r\n    \r\n        formData.append('username', 'TaabishShaikh');\r\n        formData.append('password', 'umair@2009');\r\n        formData.append('template_id', currentMeme.id);\r\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n    \r\n        fetch('https://api.imgflip.com/caption_image', {\r\n          method: 'POST',\r\n          body: formData\r\n        }).then(res => {\r\n          res.json().then(res => {\r\n              history.push(`/generate?url=${res.data.url}`);\r\n              console.log(res);\r\n          });\r\n        });\r\n      };\r\n    const nextSlide = () => {\r\n        setCurrent(current === length - 1 ? 0 : current + 1);\r\n\r\n    };\r\n\r\n    const prevSlide = () => {\r\n        setCurrent(current === 0 ? length - 1 : current - 1);\r\n    }\r\n\r\n    useEffect(() =>{\r\n        fetch('https://api.imgflip.com/get_memes').then(data => data.json().then(response => {\r\n            const _memes = response.data.memes;\r\n            \r\n            setMemes(_memes);\r\n        }))\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(memes.length){\r\n            setCaptions(Array(memes[current].box_count).fill(''));\r\n        }\r\n    }, [current, memes])\r\n\r\n    \r\n\r\n\r\n    if(!Array.isArray(memes) || memes.length <= 0){\r\n        return null;\r\n    }\r\n\r\n    return ( \r\n        <div className='container'> \r\n        <div className=\"d-grid gap-2 col-6 mx-auto\">\r\n                <button className='btn btn-success my-2 '\r\n                 onClick={ generateMeme }>Generate</button>\r\n                 {\r\n                     captions.map((c, index) => (\r\n                         <input onChange={(e) => updateCaption(e, index)} key={index} />\r\n                     ))\r\n                 }\r\n            </div>\r\n            <div className='slider'>\r\n                <FaArrowAltCircleLeft className='left-arrow' onClick={prevSlide} />\r\n                <FaArrowAltCircleRight className='right-arrow' onClick={nextSlide}/>\r\n                \r\n                {memes.map((meme, index) => {\r\n                    return(\r\n                    <div className={index === current ? 'slide active' : 'slide'} key={index}>\r\n                        {index === current && (<img src={meme.url} className='image ' alt='Memes' ></img>)}\r\n                        \r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            \r\n        </div>\r\n       \r\n     \r\n    );\r\n}\r\n \r\nexport default Meme;","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <nav className=\"nnavbar navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <Link to='/' className='navbar-brand nav justify-content-center' >MemeBanao</Link>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import { useState } from 'react';\r\nimport { useHistory, useLocation} from 'react-router-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { useClipboard } from 'use-clipboard-copy';\r\n\r\nconst MemeGenerated = () => {\r\n    const [copied, setCopied] = useState(false);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const url =  new URLSearchParams(location.search).get('url');\r\n     \r\n    const clipboard = useClipboard();\r\n\r\n    const copyLink = () => {\r\n        clipboard.copy(url);\r\n        setCopied(true);\r\n      };\r\n\r\n    return ( \r\n        <div className='container'>\r\n            <button onClick={() => history.push('/')} className='btn btn-primary d-grid gap-2 col-6 mx-auto my-2'>Make More Memes</button>\r\n            \r\n            { url && <img src={url} className='img-thumbnail custom_img'  alt='custom meme' />}\r\n            <button onClick={copyLink} className='btn btn-secondary d-grid gap-2 col-6 mx-auto my-2'>\r\n                {copied ? 'Link copied!' : 'Copy link'}</button>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default MemeGenerated;","\nimport './App.css';\nimport Meme from './Meme';\nimport Navbar from './Navbar';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MemeGenerated from './MemeGenerated';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n\n    <div className=\"App\">\n      <Navbar />\n        <Route exact path='/'>\n      <Meme />\n      </Route>\n      <Route path='/generate'>\n        <MemeGenerated />\n      </Route>\n      \n    </div>\n    </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}